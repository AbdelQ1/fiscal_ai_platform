# modules/ocr/hybrid_invoice_processor.py
"""
Processeur hybride intelligent :
1. Essaie d'abord l'extraction PDF rapide (InvoiceProcessor)
2. Fallback OCR automatique si √©chec ou confiance faible
3. Validation crois√©e des r√©sultats
"""

import logging
from pathlib import Path
from typing import Dict, Any, Optional
from .processors.invoice_processor import InvoiceProcessor
from .configurable_invoice_ocr import ConfigurableInvoiceOCR
from .invoice_extraction_result import InvoiceExtractionResult

logger = logging.getLogger(__name__)


class HybridInvoiceProcessor:
    """Processeur hybride avec fallback intelligent."""

    def __init__(self, config: Dict[str, Any]):
        self.config = config

        # Moteur principal : extraction PDF rapide
        self.fast_processor = InvoiceProcessor(config)

        # Moteur de fallback : OCR complet
        self.ocr_processor = ConfigurableInvoiceOCR(config)

        # Seuils de confiance
        self.confidence_threshold = config.get("confidence_threshold", 0.75)
        self.ocr_fallback_threshold = config.get("ocr_fallback_threshold", 0.6)

        logger.info("üîÑ Processeur hybride initialis√©")
        logger.info("   - Seuil confiance: %.2f", self.confidence_threshold)
        logger.info("   - Seuil fallback OCR: %.2f", self.ocr_fallback_threshold)

    def process_invoice(self, file_path: Path) -> InvoiceExtractionResult:
        """Point d'entr√©e principal avec strat√©gie hybride."""
        logger.info("üöÄ Traitement hybride: %s", file_path.name)

        # ================================================================
        # √âTAPE 1 : Extraction PDF rapide (m√©thode √©prouv√©e)
        # ================================================================
        try:
            logger.info("‚ö° Tentative extraction PDF rapide...")
            result_fast = self._try_fast_extraction(file_path)

            if self._is_result_reliable(result_fast):
                logger.info("‚úÖ Extraction rapide r√©ussie - Confiance: %.2f",
                            result_fast.extraction_confidence)
                result_fast.processing_method = "fast_pdf"
                return result_fast
            else:
                logger.info("‚ö†Ô∏è R√©sultat PDF insuffisant - Confiance: %.2f",
                            result_fast.extraction_confidence)

        except Exception as e:
            logger.warning("‚ùå Extraction PDF √©chou√©e: %s", str(e))
            result_fast = None

        # ================================================================
        # √âTAPE 2 : Fallback OCR complet
        # ================================================================
        logger.info("üîç Activation fallback OCR...")
        try:
            result_ocr = self._try_ocr_extraction(file_path)

            if self._is_result_reliable(result_ocr):
                logger.info("‚úÖ Extraction OCR r√©ussie - Confiance: %.2f",
                            result_ocr.extraction_confidence)
                result_ocr.processing_method = "ocr_fallback"
                return result_ocr
            else:
                logger.info("‚ö†Ô∏è R√©sultat OCR insuffisant - Confiance: %.2f",
                            result_ocr.extraction_confidence)

        except Exception as e:
            logger.warning("‚ùå Extraction OCR √©chou√©e: %s", str(e))
            result_ocr = None

        # ================================================================
        # √âTAPE 3 : Fusion des r√©sultats (meilleur effort)
        # ================================================================
        if result_fast and result_ocr:
            logger.info("üîÄ Fusion des r√©sultats des deux moteurs")
            return self._merge_results(result_fast, result_ocr)
        elif result_fast:
            logger.info("üìã Retour r√©sultat PDF (seul disponible)")
            result_fast.processing_method = "fast_pdf_only"
            return result_fast
        elif result_ocr:
            logger.info("üìÑ Retour r√©sultat OCR (seul disponible)")
            result_ocr.processing_method = "ocr_only"
            return result_ocr
        else:
            logger.error("üí• √âchec total des deux moteurs")
            return self._create_error_result(file_path)

    def _try_fast_extraction(self, file_path: Path) -> InvoiceExtractionResult:
        """Extraction PDF rapide avec le moteur √©prouv√©."""
        extracted_data = {
            "currency_amounts": [],
            "dates": [],
            "invoice_numbers": [],
            "vat_numbers": []
        }

        # Utilise la logique √©prouv√©e d'InvoiceProcessor
        return self.fast_processor.structure_results(extracted_data, "")

    def _try_ocr_extraction(self, file_path: Path) -> InvoiceExtractionResult:
        """Extraction OCR compl√®te avec le moteur configurable."""
        return self.ocr_processor.process_invoice(file_path)

    def _is_result_reliable(self, result: Optional[InvoiceExtractionResult]) -> bool:
        """√âvalue la fiabilit√© d'un r√©sultat d'extraction."""
        if not result:
            return False

        has_amount = bool(result.total_amount and result.total_amount > 0)
        has_date = bool(result.invoice_date)
        has_number = bool(result.invoice_number)
        confidence_ok = result.extraction_confidence >= self.confidence_threshold

        # Au minimum : montant + (date OU num√©ro) + confiance suffisante
        core_fields = has_amount and (has_date or has_number)
        return core_fields and confidence_ok

    def _merge_results(
        self,
        result_fast: InvoiceExtractionResult,
        result_ocr: InvoiceExtractionResult
    ) -> InvoiceExtractionResult:
        """Fusionne intelligemment les r√©sultats des deux moteurs."""

        # Base : r√©sultat avec meilleure confiance
        if result_fast.extraction_confidence >= result_ocr.extraction_confidence:
            merged = result_fast
            secondary = result_ocr
        else:
            merged = result_ocr
            secondary = result_fast

        # Compl√©tion des champs manquants
        if not merged.total_amount and secondary.total_amount:
            merged.total_amount = secondary.total_amount
            logger.info("üìà Montant compl√©t√© depuis moteur secondaire")

        if not merged.invoice_date and secondary.invoice_date:
            merged.invoice_date = secondary.invoice_date
            logger.info("üìÖ Date compl√©t√©e depuis moteur secondaire")

        if not merged.invoice_number and secondary.invoice_number:
            merged.invoice_number = secondary.invoice_number
            logger.info("üî¢ Num√©ro compl√©t√© depuis moteur secondaire")

        if (not merged.legal_identifiers.get("numero_tva")
                and secondary.legal_identifiers.get("numero_tva")):
            merged.legal_identifiers["numero_tva"] = secondary.legal_identifiers["numero_tva"]
            logger.info("üè¢ TVA compl√©t√©e depuis moteur secondaire")

        merged.processing_method = "hybrid_merged"
        merged.extraction_confidence = max(
            result_fast.extraction_confidence,
            result_ocr.extraction_confidence
        )

        return merged

    def _create_error_result(self, file_path: Path) -> InvoiceExtractionResult:
        """Cr√©e un r√©sultat d'erreur minimal."""
        result = InvoiceExtractionResult()
        result.processing_method = "failed"
        result.extraction_confidence = 0.0
        result.extracted_entities = {"error": f"√âchec extraction: {file_path.name}"}
        return result
